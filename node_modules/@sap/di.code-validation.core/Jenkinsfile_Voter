@Library('piper-lib') _
@Library('features-pipeline-lib') __
import com.sap.icd.jenkins.Utils

piperUtils = new Utils()


stage("Run tests") {
	node(){
		checkout scm;
		echo "Running voter on commitId ${piperUtils.getGitCommitId()}"
	}
	parallel(
		'Whitesource_scan': {
			node {
				timestamps {
					ansiColor('xterm') {
						checkout scm
						executeWhitesourceScan script: this, scanType: 'npm', dockerImage: 'node:8.11.1'
					}
				}
			}
		},
		'CodeValidation-voter': {
			devxPodTemplate() {
				timestamps {
					ansiColor('xterm') {
						checkout scm;
						echo "retrieving git structure from repository"
						def gitUrl = piperUtils.getGitRemoteUrl()
						def githubRepoName = piperUtils.getRepositoryFromGitUrl(gitUrl)
						try {
							sh """
									./setup-env.sh;
									grunt CodeValidation-voter;
									cp coverage/${githubRepoName}/*coverage*.json coverage/${env.BRANCH_NAME}_coverage.json || true;
									sed -i \"s|${WORKSPACE}/||g\" coverage/*_coverage.json || true;
								"""
						}
						finally {
							junit testDataPublishers: [[$class: 'AttachmentPublisher'], [$class: 'StabilityTestDataPublisher']], testResults: '**/*TEST-*.xml';
							archive "**/*TEST-*.xml, coverage/${env.BRANCH_NAME}_coverage.json";
							publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "coverage/${githubRepoName}", reportFiles: 'index.html', reportName: 'Code Coverage', reportTitles: '']);
						}
					}
				}
			}
		},
		'CodeValidation_validations': {
			devxPodTemplate() {
				timestamps {
					ansiColor('xterm') {
						checkout scm;
						// missing CheckStyle XML
						try {
							sh "./setup-env.sh; grunt validations";
						}
						finally {
							checkstyle canComputeNew: false, canRunOnFailed: true, defaultEncoding: '', healthy: '', pattern: '**/target/eslint.xml', unHealthy: '', unstableTotalHigh: '1';
						}
					}
				}
			}
		}
	)
}

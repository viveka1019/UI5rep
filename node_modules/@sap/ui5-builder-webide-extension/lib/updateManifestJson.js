var path = require('path');
var fs = require('fs');
const EvoResource = require("@ui5/fs").Resource;
var yamlParser = require('js-yaml');
var MTA_YAML_FILE_NAME = "mta.yaml";

module.exports = async function({workspace, dependencies, options}) {
	var destDir = options.configuration.destDir;
	try {
		await updateManifestFile(workspace, destDir);
	} catch(e) {
		console.log('failed to update manifest.json file ' + e.message);
	}
}

function createJsonFile(sContent, sPath){
	return new EvoResource({
		path: sPath,
		string: sContent});
}

function getManifestFile(workspace){
	return workspace.byGlob("/**/manifest.json");
}

function updateManifestFile(workspace, destDir){
	return getManifestFile(workspace).then(function(aManifestFiles){
		var sManifestFile = aManifestFiles[0];
		if (sManifestFile){
			return sManifestFile.getString().then(function(manifestFileContent) {
				var oManifestJsonContent = JSON.parse(manifestFileContent);
				
				if (oManifestJsonContent["sap.platform.hcp"]) {
					updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.hcp"], destDir);
				}
				
				if (oManifestJsonContent["sap.platform.abap"]) {
					updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.abap"], destDir);
				}
				
				// get deploy_mode flag from the Gruntfile.js of the module - will be exist only in case of html repo scenario
				if (isHtmlRepoMode()) {
					updateManifestDatasourceUri(oManifestJsonContent["sap.app"]);
				}
				
				var updatedManifestFile = createJsonFile(JSON.stringify(oManifestJsonContent, null, 4), sManifestFile.getPath());
				return workspace.write(updatedManifestFile);
			});
		} else {
		throw new Error("devxUpdateManifest - no manifest.json file found in project");
		}		
	});
}

function updateManifestDeploymentBlockUri(oManfiestDeploymentBlock, sSourceFolderPathInProject) {
    if (oManfiestDeploymentBlock.uri !== null) {
        var sManifestUri = oManfiestDeploymentBlock.uri; //current uri in manifest
        if ((sSourceFolderPathInProject) && sSourceFolderPathInProject !== "") { //when source folder empty (root) - no update needed (paths within target and source are the same)
            var indexOfSourceFolder = sManifestUri.lastIndexOf(sSourceFolderPathInProject); //verify the specified src folder exist in current uri
            if (indexOfSourceFolder !== -1) {
                var sUriPrefix = sManifestUri.substring(0, indexOfSourceFolder); //uri prefix before the source folder path (keep the '/' before the src path)
                var sUpdatedUri = sUriPrefix; //includes the previous prefix (e.g abap path to the application) and the rest is the manifest path within target
                oManfiestDeploymentBlock.uri = sUpdatedUri;
            }
        }
    }
    else{
        throw new Error("devxUpdateManifest - no uri defined in manifest.json file");
    }
}

function  updateManifestDatasourceUri(oManfiestApplicationBlock) {
    if (oManfiestApplicationBlock && oManfiestApplicationBlock.dataSources) {
        for(sDataSourceName in oManfiestApplicationBlock.dataSources){
            var oDataSource = oManfiestApplicationBlock.dataSources[sDataSourceName];
            if(oDataSource.uri && oDataSource.uri != null){
                if(oDataSource.uri[0] === "/"){
                    oDataSource.uri = oDataSource.uri.substring(1);
                }
            } else{
                console.log("devxUpdateManifest - datasource.uri attribute in the manifest.json file was not found or incorrect. Therefore, update this attribute to be reletive uri is irrelevant.");
            }
        }
    } else {
        console.log("devxUpdateManifest - datasource.uri attribute in the manifest.json file was not found or incorrect. Therefore, update this attribute to be reletive uri is irrelevant.");
    }
}

function isHtmlRepoMode(){
	if (fs.existsSync(MTA_YAML_FILE_NAME)) {
		var mtaYamlFile = fs.readFileSync(MTA_YAML_FILE_NAME);
		var oMtaYamlFileContent = yamlParser.safeLoad(mtaYamlFile);
		return oMtaYamlFileContent.parameters && oMtaYamlFileContent.parameters.deploy_mode && 
				oMtaYamlFileContent.parameters.deploy_mode == "html_repo";
		}
	else {
		return false;
	}
}

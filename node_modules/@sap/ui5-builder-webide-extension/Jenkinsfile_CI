@Library('piper-lib') _
@Library('features-pipeline-lib') __
@Library('piper-lib-os') ___

stage("voter") {
  node() {
    checkout scm
		load "Jenkinsfile_Voter"
	}
}

stage("Security"){
  node() {
    checkout scm
    setupPipelineEnvironment script: this, githubOrg: 'devx', githubRepo: 'ui5-builder-webide-extension', gitBranch: env.BRANCH_NAME
    def cxProjectName = globalPipelineEnvironment.getConfigProperty('checkmarxProject')
    def cxGroupId = globalPipelineEnvironment.getConfigProperty('checkmarxGroupId')
    def preset = globalPipelineEnvironment.getConfigProperty('preset')
    executeCheckmarxScan script: this, checkmarxProject: cxProjectName, checkmarxGroupId: cxGroupId, preset: preset
  }
}

stage("IPScan and PPMS") {
  node {
    checkout scm
    def packageJson = readJSON file: 'package.json'
    measureDuration(script: this, measurementName: 'ppmscheck_duration') {
      executePPMSComplianceCheck script: this, scanType: 'whitesource',
	    whitesourceUserTokenCredentialsId: 'whitesourceKey',
	    whitesourceProjectNames:"${packageJson.name} - ${packageJson.version}"
    }
  }
}

stage("Release") {
  def version_extension
  def commitId
  node() {
      checkout scm
      def piperUtils = new com.sap.icd.jenkins.Utils();
      commitId = piperUtils.getGitCommitId();
      def utils = new com.sap.devx.featurelib.Utils();
      version_extension = "${utils.gitCommitTimestamp(commitId)}+${commitId}"
  }
  
  node() {
    def xMakeServerName = globalPipelineEnvironment.getConfigProperty('xMakeServer')
    def jobName = globalPipelineEnvironment.getConfigProperty('xMakeJobName')
    triggerXMakeRemoteJob (		
      xMakeServer: xMakeServerName,		
      xMakeJobName: jobName,		
      xMakeJobParameters: "MODE=stage_and_promote\nTREEISH=${commitId}"					
    )
  }
}
